#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rect
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="upsData")]
	public partial class upsTempDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLine_up(Line_up instance);
    partial void UpdateLine_up(Line_up instance);
    partial void DeleteLine_up(Line_up instance);
    #endregion
		
		public upsTempDataContext() : 
				base(global::rect.Properties.Settings.Default.upsDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public upsTempDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public upsTempDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public upsTempDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public upsTempDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Line_up> Line_ups
		{
			get
			{
				return this.GetTable<Line_up>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Line_ups")]
	public partial class Line_up : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Unit;
		
		private System.Nullable<double> _Power_Factor;
		
		private System.Nullable<int> _Load;
		
		private string _Battery_Cap;
		
		private System.Nullable<int> _Bat_bckup_Full;
		
		private System.Nullable<int> _Bat_bckup_Half;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPower_FactorChanging(System.Nullable<double> value);
    partial void OnPower_FactorChanged();
    partial void OnLoadChanging(System.Nullable<int> value);
    partial void OnLoadChanged();
    partial void OnBattery_CapChanging(string value);
    partial void OnBattery_CapChanged();
    partial void OnBat_bckup_FullChanging(System.Nullable<int> value);
    partial void OnBat_bckup_FullChanged();
    partial void OnBat_bckup_HalfChanging(System.Nullable<int> value);
    partial void OnBat_bckup_HalfChanged();
    #endregion
		
		public Line_up()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Power_Factor", DbType="Float")]
		public System.Nullable<double> Power_Factor
		{
			get
			{
				return this._Power_Factor;
			}
			set
			{
				if ((this._Power_Factor != value))
				{
					this.OnPower_FactorChanging(value);
					this.SendPropertyChanging();
					this._Power_Factor = value;
					this.SendPropertyChanged("Power_Factor");
					this.OnPower_FactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Load]", Storage="_Load", DbType="Int")]
		public System.Nullable<int> Load
		{
			get
			{
				return this._Load;
			}
			set
			{
				if ((this._Load != value))
				{
					this.OnLoadChanging(value);
					this.SendPropertyChanging();
					this._Load = value;
					this.SendPropertyChanged("Load");
					this.OnLoadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Battery_Cap", DbType="VarChar(20)")]
		public string Battery_Cap
		{
			get
			{
				return this._Battery_Cap;
			}
			set
			{
				if ((this._Battery_Cap != value))
				{
					this.OnBattery_CapChanging(value);
					this.SendPropertyChanging();
					this._Battery_Cap = value;
					this.SendPropertyChanged("Battery_Cap");
					this.OnBattery_CapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bat_bckup_Full", DbType="Int")]
		public System.Nullable<int> Bat_bckup_Full
		{
			get
			{
				return this._Bat_bckup_Full;
			}
			set
			{
				if ((this._Bat_bckup_Full != value))
				{
					this.OnBat_bckup_FullChanging(value);
					this.SendPropertyChanging();
					this._Bat_bckup_Full = value;
					this.SendPropertyChanged("Bat_bckup_Full");
					this.OnBat_bckup_FullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bat_bckup_Half", DbType="Int")]
		public System.Nullable<int> Bat_bckup_Half
		{
			get
			{
				return this._Bat_bckup_Half;
			}
			set
			{
				if ((this._Bat_bckup_Half != value))
				{
					this.OnBat_bckup_HalfChanging(value);
					this.SendPropertyChanging();
					this._Bat_bckup_Half = value;
					this.SendPropertyChanged("Bat_bckup_Half");
					this.OnBat_bckup_HalfChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
